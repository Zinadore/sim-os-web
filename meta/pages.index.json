{
  "ownKey": "pages",
  "childrenPages": {
    "assignments": {
      "ownKey": "assignments",
      "childrenPages": {"homework2": {
        "ownKey": "homework2",
        "ownPages": [{
          "reference": {
            "path": "assignments",
            "baseUrl": "https://bluegrit.cs.umbc.edu/~iboutsi1/simos",
            "fileName": "homework2",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://bluegrit.cs.umbc.edu/~iboutsi1/simos/assignments/homework2"
          },
          "description": "",
          "title": "Homework 2",
          "content": "<h1 id=\"homework-2\">Homework 2<\/h1>\n<p>Points: 50<\/p>\n<p>Due by 11:59 EDT on November 10, 2019<\/p>\n<h2 id=\"introduction\">Introduction<\/h2>\n<p>In this homework you will be implementing three process scheduling algorithms for a simulated OS called SimOS, then analyzing their results and performance. You will be using Java, Processing, and of course SimOS. The work will be done in two parts. Part 1 will be done in class in groups, and Part 2 is to be done individually.<\/p>\n<p>You will be submitting everything through GitHub. Before you begin, be sure to accept the homework on GitHub at <a href=\"https://classroom.github.com/a/ixhcjsUk\">https://classroom.github.com/a/ixhcjsUk<\/a><\/p>\n<h2 id=\"set-up\">Set Up<\/h2>\n<p>If you haven't already, visit <a href=\"https://bluegrit.cs.umbc.edu/~iboutsi1/simos/wiki\">the Wiki<\/a> to set up the project in your own computing environment. Set up will include downloading Processing, SimOS and creating the basic infrastructure code for this homework.<\/p>\n<p>In the wiki you will also find links to the Java documentation, SimOS documentation and other resources. They are there for you to use so do not ignore them! You will also find that every Java class mentioned in the Wiki is a link to the matching documentation page.<\/p>\n<p>The rest of this document assumes you have gone through the setup and are somewhat familiar with the framework.<\/p>\n<h3 id=\"algorithms\">Algorithms<\/h3>\n<p>You have to implement and perform analysis on three (3) process scheduling algorithms in total. Those are:<\/p>\n<ol>\n<li>Shortest Job First<\/li>\n<li>Shortest Remaining Time Next<\/li>\n<li>Round Robin<\/li>\n<\/ol>\n<div class=\"alert alert-danger\">\n    Round Robin requires a parameter to be passed in the constructor. That parameter is the number of time slices each process gets. The constructor should look some like the following:\n<\/div> \n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"kd\">public<\/span>&nbsp;<span class=\"nf\">PS_RR<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span>&nbsp;<span class=\"n\">slices<\/span><span class=\"o\">)<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"kd\">super<\/span><span class=\"o\">();<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;Store&nbsp;slices&nbsp;somewhere<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4&nbsp;<\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br>\n<p>The algorithms will be implemented in two parts.<\/p>\n<h4 id=\"part-1\">Part 1<\/h4>\n<p>You are to form groups in class and then select one of the three algorithms. It can be whichever one you want. You are then to implement that one algorithm in cooperation with your group. You can work on a single computer if you want, and share the developed algorithm with the rest of your group at the end of class. (e.g. You may email the code to each member)<\/p>\n<h4 id=\"part-2\">Part 2<\/h4>\n<p>Part 2 comprises two activities. You must implement the remaining two algorithms supported by SimOS. You are to do this part on your own (i.e. you cannot share the implementation of these with your group). You also have to compare and contrast two algorithms using the criteria we have talked about in class.<\/p>\n<h5 id=\"write-up\">Write Up<\/h5>\n<p>The last part of this homework is your algorithm analysis. As part of your write-up you must:<\/p>\n<ol type=\"a\">\n<li>\nIdentify the members of your group and the algorithm you chose to implement together.\n<\/li>\n\n<li> Select <b>any two<\/b> of the three implemented algorithms and compare and contrast them. You do not need to write a novel here (it should be no longer than a paragraph or two), you should have data from the simulation. Base your explanation on that data! If you made any interesting design decisions in your implementations, you can discuss them here.\n<\/li>\n<\/ol>\n<p>In addition to the comparison you should select one of the three algorithms and create an input of processes that will expose the algorithm's weaknesses. Include in your write up why your data set does that.<\/p>\n<p>The algorithm can be on of the two discussed previously, or it can be the third one. It is up to you to decide. You can find information on how to create your own data sets <a href=\"https://bluegrit.cs.umbc.edu/~iboutsi1/simos/tutorials/input\">here<\/a>.<\/p>\n<h3 id=\"submitting\">Submitting<\/h3>\n<p>Each person will have to submit all three algorithms, the sketch file, the analysis and the input data set. Everything should be in the repository you created when you accepted this assignment.<\/p>\n<p><b>Make sure your analysis is in PDF format. Any other format will not be accepted.<\/b><\/p>\n<p>So all in all you need:<\/p>\n<ul>\n<li>1 .pde file (this is the sketch)<\/li>\n<li>3 .java files (these are the algorithms)<\/li>\n<li>1 .pdf file (this is your analysis)<\/li>\n<li>1 .txt file (this is your input set)<\/li>\n<\/ul>\n<p>To submit make sure your files are in their own directory, then run the following command in that directory (substituting the list of files you need to commit for your_files_go_here and your GitHub username for username, of course):<\/p>\n<pre>\ngit init\ngit add your_files_go_here\ngit commit\ngit remote add origin git@github.com:UMBC-CMSC421-FA2019/simos-section-6-username.git\ngit push -u origin master\n\ngit tag hw2\ngit push origin --tags\n<\/pre>\n"
        }]
      }}
    },
    "tutorials": {
      "ownKey": "tutorials",
      "childrenPages": {"input": {
        "ownKey": "input",
        "ownPages": [{
          "reference": {
            "path": "tutorials",
            "baseUrl": "https://bluegrit.cs.umbc.edu/~iboutsi1/simos",
            "fileName": "input",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://bluegrit.cs.umbc.edu/~iboutsi1/simos/tutorials/input"
          },
          "description": "",
          "title": "Input",
          "content": "<h1 id=\"creating-your-own-processes\">Creating your own processes<\/h1>\n<p>SimOS is fairly extendable. One of its features is that you can bypass the built-in list of processes and create your own with a simple text file!<\/p>\n<h3 id=\"process-definition\">Process Definition<\/h3>\n<p>Each line in the text file will define a new process. The format of the process is space separated and looks like this:<\/p>\n<div class=\"card\">\n    <div class=\"card-body\">\n        ArrivalTime Code Memory Name\n    <\/div>\n<\/div>\n<p>You need a space separating each &quot;section&quot;. ArrivalTime is just a non-negative number. Memory is a positive number in MB. Name is a string. Code is also a string and it can accept the following characters:<\/p>\n<div class=\"container\">\n<dl class=\"row\">\n    <dt class=\"col-1\">*<\/dt>\n    <dd class=\"col-10\">This is a normal CPU tick<\/dd>\n    <dt class=\"col-1\">@<\/dt>\n    <dd class=\"col-10\">This means that the process needs to block for I/O<\/dd>\n    <dt class=\"col-1\">$<\/dt>\n    <dd class=\"col-10\">The process terminates when it reaches this character<\/dd>\n<\/dl>\n<\/div>\n<p>So for example, the following two lines would define two processes. One called potato that arrives at time 0, executes for 4 &quot;ticks&quot; then terminates and requires 20 MB of RAM.<\/p>\n<p>The other process is called Tomato, arrives at time 3, executes for 4 blocks for io then continues for one more tick then terminates. It also requires 20 MB of RAM.<\/p>\n<div class=\"card\">\n    <div class=\"card-body\">\n    <pre>\n    0 ****$ 20 potato\n    3 ****@*$ 20 Tomato\n    <\/pre>\n    <\/div>\n<\/div>\n"
        }]
      }}
    },
    "wiki": {
      "ownKey": "wiki",
      "ownPages": [{
        "reference": {
          "path": "",
          "baseUrl": "https://bluegrit.cs.umbc.edu/~iboutsi1/simos",
          "fileName": "wiki",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://bluegrit.cs.umbc.edu/~iboutsi1/simos/wiki"
        },
        "description": "",
        "title": "Wiki",
        "content": "<p>This is the wiki index!@<\/p>\n"
      }]
    }
  }
}