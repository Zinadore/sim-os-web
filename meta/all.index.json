{
  "ownKey": "internal",
  "childrenPages": {"wiki": {
    "ownKey": "wiki",
    "childrenPages": {
      "running": {
        "ownKey": "running",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "running",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/running"
          },
          "previous": {
            "path": "wiki/algorithms",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "PS_FCFS",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/algorithms/PS_FCFS"
          },
          "description": "",
          "title": "Running the simulation",
          "content": "<p>We are almost done! No that we have our two algorithms we can run the simulation. But first we need to tell it which algorithms we have implemented.<\/p>\n<h2 id=\"back-to-setup\">Back to setup()<\/h2>\n<p>Going back to the sketch and the setup method, we need to let the simulation know which classes we are providing, so it can load them. We need to change our setup method from:\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1 <\/span><span class=\"n\">Simulator<\/span> <span class=\"n\">sim<\/span><span class=\"o\">;<\/span> <span class=\"c1\">// &lt;-- Don't forget this line!<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2 <\/span><span class=\"kt\">void<\/span> <span class=\"nf\">setup<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3 <\/span>    <span class=\"n\">SimulatorOptions<\/span> <span class=\"n\">opts<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">SimulatorOptions<\/span><span class=\"o\">();<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4 <\/span>    <span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">Width<\/span> <span class=\"o\">=<\/span> <span class=\"n\">width<\/span><span class=\"o\">;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">5 <\/span>    <span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">Height<\/span> <span class=\"o\">=<\/span> <span class=\"n\">height<\/span><span class=\"o\">;<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">6 <\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">7 <\/span>    <span class=\"n\">sim<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">Simulator<\/span><span class=\"o\">(<\/span><span class=\"k\">this<\/span><span class=\"o\">,<\/span> <span class=\"n\">opts<\/span><span class=\"o\">);<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">8 <\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br><\/p>\n<p>to<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"n\">Simulator<\/span>&nbsp;<span class=\"n\">sim<\/span><span class=\"o\">;<\/span>&nbsp;<span class=\"c1\">//&nbsp;&lt;--&nbsp;Don&#39;t&nbsp;forget&nbsp;this&nbsp;line!<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><span class=\"kt\">void<\/span>&nbsp;<span class=\"nf\">setup<\/span><span class=\"o\">()<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">SimulatorOptions<\/span>&nbsp;<span class=\"n\">opts<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"k\">new<\/span>&nbsp;<span class=\"n\">SimulatorOptions<\/span><span class=\"o\">();<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">Width<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"n\">width<\/span><span class=\"o\">;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">Height<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"n\">height<\/span><span class=\"o\">;<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">ProcessSchedulers<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"n\">EnumSet<\/span><span class=\"o\">.<\/span><span class=\"na\">of<\/span><span class=\"o\">(<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">ProcessSchedulerType<\/span><span class=\"o\">.<\/span><span class=\"na\">FirstComeFirstServed<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">);<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">MemoryManagers<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"n\">EnumSet<\/span><span class=\"o\">.<\/span><span class=\"na\">of<\/span><span class=\"o\">(<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MemoryManagerType<\/span><span class=\"o\">.<\/span><span class=\"na\">FirstFit<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">);<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">EnableDarkMode<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"kc\">true<\/span><span class=\"o\">;<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">sim<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"k\">new<\/span>&nbsp;<span class=\"n\">Simulator<\/span><span class=\"o\">(<\/span><span class=\"k\">this<\/span><span class=\"o\">,<\/span>&nbsp;<span class=\"n\">opts<\/span><span class=\"o\">);<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br>\n<p>By providing <code>opts.ProcessSchedulers<\/code> and <code>opts.MemoryManagers<\/code> the framework will generate the correct UI for us and load the classes you created. If you wanted to add RoundRobin as well for example you could do it as such:\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1 <\/span><span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">ProcessSchedulers<\/span> <span class=\"o\">=<\/span> <span class=\"n\">EnumSet<\/span><span class=\"o\">.<\/span><span class=\"na\">of<\/span><span class=\"o\">(<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2 <\/span>    <span class=\"n\">ProcessSchedulerType<\/span><span class=\"o\">.<\/span><span class=\"na\">FirstComeFirstServed<\/span><span class=\"o\">,<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3 <\/span>    <span class=\"n\">ProcessSchedulerType<\/span><span class=\"o\">.<\/span><span class=\"na\">RoundRobin<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4 <\/span><span class=\"o\">);<\/span><br><\/pre><\/div><br><\/p>\n<div class=\"alert alert-success\" role=\"alert\">\n  You can also toggle dark mode on and off from the options. Check both modes to see what suits you best !\n<\/div>\n<h2 id=\"pixels\">Pixels!!<\/h2>\n<p>Time to see those pixels drawn! Hit the &quot;Play&quot; button in the Processing IDE, select the options you want, and click &quot;Start Simulation&quot;. You should see a screen similar to this:<\/p>\n<p><img class=\"img-fluid mx-auto d-block\" src=\"/assets/media/simulation_running.png\"><\/img><\/p>\n<p>The buttons should be self-explanatory. Forward can be used to step one tick at a time. By default the simulation will try to have one CPU tick per second. However if that is too slow (or you have a lot of processes), you can use the slider to speed things up!<\/p>\n<h2 id=\"done\">Done<\/h2>\n<p>You are finally done with the tutorial. CMSC 421 students can move on with their project here. Reminder that you have the <a href=\"https://docs.oracle.com/javase/8/docs/api/\" target=\"_blank\">Java 8 Documentation<\/a>, <a href=\"https://processing.org/reference/\" target=\"_blank\">Processing Reference<\/a>, and SimOS Documentation available to use.<\/p>\n"
        }]
      },
      "algorithms": {
        "ownKey": "algorithms",
        "childrenPages": {
          "PS_FCFS": {
            "ownKey": "PS_FCFS",
            "ownPages": [{
              "reference": {
                "path": "wiki/algorithms",
                "baseUrl": "https://zinadore.github.io/sim-os-web",
                "fileName": "PS_FCFS",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://zinadore.github.io/sim-os-web/wiki/algorithms/PS_FCFS"
              },
              "next": {
                "path": "wiki",
                "baseUrl": "https://zinadore.github.io/sim-os-web",
                "fileName": "running",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://zinadore.github.io/sim-os-web/wiki/running"
              },
              "previous": {
                "path": "wiki/algorithms",
                "baseUrl": "https://zinadore.github.io/sim-os-web",
                "fileName": "MS_FirstFit",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://zinadore.github.io/sim-os-web/wiki/algorithms/MS_FirstFit"
              },
              "description": "",
              "title": "First Come, First Served",
              "content": "<p>It is time to implement a process scheduler next. We will be implementing First Come, First Served as it is straightforward. We need a new java file called <code>PS_FCFS.java<\/code>, just like we did for First Fit.<\/p>\n<h2 id=\"quick-recap\">Quick Recap<\/h2>\n<p>FCFS works by putting the processes in a queue in the order they arrive, then they get scheduled in that order. It is not a preemptive algorithm.<\/p>\n<h2 id=\"preamble\">Preamble<\/h2>\n<p>Again, we need to declare the package, and import whatever other packages we need first. Instead of importing the whole <code>soss.core<\/code> package, we will just import <code>soss.core.Process<\/code> as that is the only class we need out of that package.\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1 <\/span><span class=\"kn\">package<\/span> <span class=\"nn\">soss.schedulers<\/span><span class=\"o\">;<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2 <\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3 <\/span><span class=\"kn\">import<\/span> <span class=\"nn\">soss.core.Process<\/span><span class=\"o\">;<\/span><br><\/pre><\/div><br><\/p>\n<h2 id=\"the-class\">The class<\/h2>\n<p>This class is slightly bigger so I am gonna have the whole outline here first.\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\"> 1 <\/span><span class=\"kd\">public<\/span> <span class=\"kd\">class<\/span> <span class=\"nc\">PS_FCFS<\/span> <span class=\"kd\">extends<\/span> <span class=\"n\">DefaultProcessScheduler<\/span> <span class=\"o\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\"> 2 <\/span>  <br><a name=\"line-3\"><\/a><span class=\"lineno\"> 3 <\/span>  <span class=\"kd\">public<\/span> <span class=\"nf\">PS_FCFS<\/span><span class=\"o\">(){<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\"> 4 <\/span>    <span class=\"kd\">super<\/span><span class=\"o\">();<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\"> 5 <\/span>  <span class=\"o\">}<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\"> 6 <\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\"> 7 <\/span>  <span class=\"kd\">public<\/span> <span class=\"n\">Process<\/span> <span class=\"nf\">selectProcessToRun<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span> <span class=\"o\">}<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\"> 8 <\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\"> 9 <\/span>  <span class=\"kd\">public<\/span> <span class=\"kt\">boolean<\/span> <span class=\"nf\">preempt<\/span><span class=\"o\">(){<\/span> <span class=\"o\">}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10 <\/span>  <br><a name=\"line-11\"><\/a><span class=\"lineno\">11 <\/span>  <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">removeProcess<\/span><span class=\"o\">(<\/span><span class=\"n\">Process<\/span> <span class=\"n\">p<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span> <span class=\"o\">}<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12 <\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13 <\/span>  <span class=\"kd\">public<\/span> <span class=\"kt\">void<\/span> <span class=\"nf\">addProcess<\/span><span class=\"o\">(<\/span><span class=\"n\">Process<\/span> <span class=\"n\">p<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span> <span class=\"o\">}<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14 <\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15 <\/span>  <span class=\"kd\">public<\/span> <span class=\"n\">String<\/span> <span class=\"nf\">toString<\/span><span class=\"o\">(){<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16 <\/span>    <span class=\"k\">return<\/span> <span class=\"s\">&quot;First Come First Served&quot;<\/span><span class=\"o\">;<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17 <\/span>  <span class=\"o\">}<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18 <\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br><\/p>\n<p>Much like DefaultMemoryManager, you are given a DefaultProcessScheduler, that implements a lot of the required functionality for you. It also provides you with an ArrayList of Process called queue. Not that it is not an actuall queue data structure, but we name it as such keep with the typical nomenclature. It is up to you to use that data structure properly.<\/p>\n<p>Next we will implement the methods one by one.<\/p>\n<h4 id=\"preempt\">preempt()<\/h4>\n<p>preempt tells the simulation if the process that is <strong>currently<\/strong> running, should be kicked out of the CPU. It is called once every CPU tick. Since &quot;First Come, First Served&quot; is not a preemtive algorithm it is never the case that we will have to kick out the current process. So we just return false.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"kd\">public<\/span>&nbsp;<span class=\"kt\">boolean<\/span>&nbsp;<span class=\"nf\">preempt<\/span><span class=\"o\">(){<\/span>&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"kc\">false<\/span><span class=\"o\">;<\/span>&nbsp;<span class=\"o\">}<\/span><br><\/pre><\/div><br>\n<h4 id=\"addprocessprocess-p\">addProcess(Process p)<\/h4>\n<p>This method is used when a process has been admitted, and needs to be placed in the queue. We just add that process at the end of the list.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"kd\">public<\/span>&nbsp;<span class=\"kt\">void<\/span>&nbsp;<span class=\"nf\">addProcess<\/span><span class=\"o\">(<\/span><span class=\"n\">Process<\/span>&nbsp;<span class=\"n\">p<\/span><span class=\"o\">){<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">queue<\/span><span class=\"o\">.<\/span><span class=\"na\">add<\/span><span class=\"o\">(<\/span><span class=\"n\">p<\/span><span class=\"o\">);<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3&nbsp;<\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br>\n<h4 id=\"removeprocessprocess-p\">removeProcess(Process p)<\/h4>\n<p>This method is straightforward as well. And we don't need to manage anything else, we just remove the process from the list!<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"kd\">public<\/span>&nbsp;<span class=\"kt\">void<\/span>&nbsp;<span class=\"nf\">removeProcess<\/span><span class=\"o\">(<\/span><span class=\"n\">Process<\/span>&nbsp;<span class=\"n\">p<\/span><span class=\"o\">){<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">queue<\/span><span class=\"o\">.<\/span><span class=\"na\">remove<\/span><span class=\"o\">(<\/span><span class=\"n\">p<\/span><span class=\"o\">);<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3&nbsp;<\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br>\n<h4 id=\"selectprocesstorun\">selectProcessToRun()<\/h4>\n<p>As the name implies this method asks us to figure out the next process to run. Since we are never preemptying we can assume that the current process has just finished execution. So our goal is to find the process with the smalles arrival time.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"kd\">public<\/span>&nbsp;<span class=\"n\">Process<\/span>&nbsp;<span class=\"nf\">selectProcessToRun<\/span><span class=\"o\">()<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">Process<\/span>&nbsp;<span class=\"n\">p<\/span><span class=\"o\">;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;If&nbsp;the&nbsp;queue&nbsp;is&nbsp;empty&nbsp;we&nbsp;got&nbsp;nothing&nbsp;to&nbsp;execute!<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if<\/span><span class=\"o\">(<\/span><span class=\"n\">queue<\/span><span class=\"o\">.<\/span><span class=\"na\">isEmpty<\/span><span class=\"o\">())<\/span>&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"kc\">null<\/span><span class=\"o\">;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;If&nbsp;we&nbsp;only&nbsp;have&nbsp;one&nbsp;process,&nbsp;we&nbsp;schedule&nbsp;that.<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else<\/span>&nbsp;<span class=\"k\">if<\/span><span class=\"o\">(<\/span><span class=\"n\">queue<\/span><span class=\"o\">.<\/span><span class=\"na\">size<\/span><span class=\"o\">()==<\/span><span class=\"mi\">1<\/span><span class=\"o\">)<\/span>&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">queue<\/span><span class=\"o\">.<\/span><span class=\"na\">get<\/span><span class=\"o\">(<\/span><span class=\"mi\">0<\/span><span class=\"o\">);<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;Loop&nbsp;through&nbsp;all&nbsp;the&nbsp;processes&nbsp;and&nbsp;fine&nbsp;the&nbsp;one&nbsp;with&nbsp;the&nbsp;smallest&nbsp;arrival&nbsp;time<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else<\/span><span class=\"o\">{<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">p<\/span><span class=\"o\">=<\/span><span class=\"n\">queue<\/span><span class=\"o\">.<\/span><span class=\"na\">get<\/span><span class=\"o\">(<\/span><span class=\"mi\">0<\/span><span class=\"o\">);<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">for<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span>&nbsp;<span class=\"n\">i<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"mi\">1<\/span><span class=\"o\">;<\/span>&nbsp;<span class=\"n\">i<\/span>&nbsp;<span class=\"o\">&lt;<\/span>&nbsp;<span class=\"n\">queue<\/span><span class=\"o\">.<\/span><span class=\"na\">size<\/span><span class=\"o\">();<\/span>&nbsp;<span class=\"n\">i<\/span><span class=\"o\">++){<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if<\/span><span class=\"o\">(<\/span><span class=\"n\">queue<\/span><span class=\"o\">.<\/span><span class=\"na\">get<\/span><span class=\"o\">(<\/span><span class=\"n\">i<\/span><span class=\"o\">).<\/span><span class=\"na\">getArrivalTime<\/span><span class=\"o\">()<\/span>&nbsp;<span class=\"o\">&lt;<\/span>&nbsp;<span class=\"n\">p<\/span><span class=\"o\">.<\/span><span class=\"na\">getArrivalTime<\/span><span class=\"o\">()){<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">p<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"n\">queue<\/span><span class=\"o\">.<\/span><span class=\"na\">get<\/span><span class=\"o\">(<\/span><span class=\"n\">i<\/span><span class=\"o\">);<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">p<\/span><span class=\"o\">;<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br>\n<div class=\"alert alert-warning\" role=\"alert\">\n  We could instead keep the queue in order when we add processes to it. So the selection would always be queue.get(0). It is my design choice to make addition fast and selection slower. Not necessarily the best choice though!\n<\/div>\n"
            }]
          },
          "MS_FirstFit": {
            "ownKey": "MS_FirstFit",
            "ownPages": [{
              "reference": {
                "path": "wiki/algorithms",
                "baseUrl": "https://zinadore.github.io/sim-os-web",
                "fileName": "MS_FirstFit",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://zinadore.github.io/sim-os-web/wiki/algorithms/MS_FirstFit"
              },
              "next": {
                "path": "wiki/algorithms",
                "baseUrl": "https://zinadore.github.io/sim-os-web",
                "fileName": "PS_FCFS",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://zinadore.github.io/sim-os-web/wiki/algorithms/PS_FCFS"
              },
              "previous": {
                "path": "wiki",
                "baseUrl": "https://zinadore.github.io/sim-os-web",
                "fileName": "algorithms",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://zinadore.github.io/sim-os-web/wiki/algorithms"
              },
              "description": "",
              "title": "First Fit",
              "content": "<p>We will be implementing the First Fit algorithm in this section. So switch to / create the file MS_FirstFit.java and lets get started.<\/p>\n<h2 id=\"preamble\">Preamble<\/h2>\n<p>At the very top of the file, you need the following lines:\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1 <\/span><span class=\"kn\">package<\/span> <span class=\"nn\">soss.managers<\/span><span class=\"o\">;<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2 <\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3 <\/span><span class=\"kn\">import<\/span> <span class=\"nn\">soss.core.*<\/span><span class=\"o\">;<\/span><br><\/pre><\/div><br><\/p>\n<p>This lets the Java runtime know that the class in this file is part of that package. It is required as SimOS will use that information to dynamically load your class! We will also use the provided MemoryPartition class that belongs to soss.core so we import that as well.<\/p>\n<h2 id=\"the-class\">The class<\/h2>\n<p>Next we will define our class:\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1 <\/span><span class=\"kd\">public<\/span> <span class=\"kd\">class<\/span> <span class=\"nc\">MS_FirstFit<\/span> <span class=\"kd\">extends<\/span> <span class=\"n\">DefaultMemoryManager<\/span> <span class=\"o\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2 <\/span>    <span class=\"kd\">public<\/span> <span class=\"nf\">MS_FirstFit<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span> <span class=\"n\">RAMSize<\/span><span class=\"o\">)<\/span> <span class=\"o\">{<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3 <\/span>        <span class=\"kd\">super<\/span><span class=\"o\">(<\/span><span class=\"n\">RAMSize<\/span><span class=\"o\">);<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4 <\/span>    <span class=\"o\">}<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">5 <\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">6 <\/span>    <span class=\"kd\">public<\/span> <span class=\"n\">String<\/span> <span class=\"nf\">toString<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">7 <\/span>        <span class=\"k\">return<\/span> <span class=\"s\">&quot;FirstFit&quot;<\/span><span class=\"o\">;<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">8 <\/span>    <span class=\"o\">}<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">9 <\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br><\/p>\n<p>Extends is Java's way of defining inheritance. DefaultMemoryManager is a class that is provided to you, and does a lot of the heavy lifting. So by inheriting from that class, MS_FirstFit gets all of that functionality for free.<\/p>\n<h2 id=\"selecting-a-memory-partition\">Selecting a memory partition<\/h2>\n<p>There is one more function that is missing, called findAvailablePartition. DefaultMemoryManager provides you an ArrayList of MemoryPartition that represents the RAM. findAvailablePartition asks you to select which of those partitions (if any), will be used to place the new process. If no partition is found, you need to return - 1 to signal the error.<\/p>\n<p>All implementations will require this method, but what changes is the way RAM is searched. First Fit will look for the first partition that has enough memory and use that.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"kd\">public<\/span>&nbsp;<span class=\"kt\">int<\/span>&nbsp;<span class=\"nf\">findAvailablePartition<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span>&nbsp;<span class=\"n\">size<\/span><span class=\"o\">)<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MemoryPartition<\/span>&nbsp;<span class=\"n\">p<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"kc\">null<\/span><span class=\"o\">;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;Loop&nbsp;over&nbsp;all&nbsp;available&nbsp;partitions<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">for<\/span>&nbsp;<span class=\"o\">(<\/span><span class=\"kt\">int<\/span>&nbsp;<span class=\"n\">i<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"mi\">0<\/span><span class=\"o\">;<\/span>&nbsp;<span class=\"n\">i<\/span>&nbsp;<span class=\"o\">&lt;<\/span>&nbsp;<span class=\"n\">ram<\/span><span class=\"o\">.<\/span><span class=\"na\">size<\/span><span class=\"o\">();<\/span>&nbsp;<span class=\"n\">i<\/span><span class=\"o\">++)<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">p<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"n\">ram<\/span><span class=\"o\">.<\/span><span class=\"na\">get<\/span><span class=\"o\">(<\/span><span class=\"n\">i<\/span><span class=\"o\">);<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;If&nbsp;it&nbsp;is&nbsp;free&nbsp;and&nbsp;it&nbsp;is&nbsp;large&nbsp;enough&nbsp;we&nbsp;can&nbsp;use&nbsp;it<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if<\/span>&nbsp;<span class=\"o\">(<\/span><span class=\"n\">p<\/span><span class=\"o\">.<\/span><span class=\"na\">isFree<\/span><span class=\"o\">()<\/span>&nbsp;<span class=\"o\">&amp;&amp;<\/span>&nbsp;<span class=\"n\">p<\/span><span class=\"o\">.<\/span><span class=\"na\">getSize<\/span><span class=\"o\">()<\/span>&nbsp;<span class=\"o\">&gt;=<\/span>&nbsp;<span class=\"n\">size<\/span><span class=\"o\">)<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">i<\/span><span class=\"o\">;<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;No&nbsp;partition&nbsp;found,&nbsp;so&nbsp;we&nbsp;return&nbsp;-1<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"o\">-<\/span><span class=\"mi\">1<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br>\n<h2 id=\"sanity-check\">Sanity check<\/h2>\n<p>I have included the whole file here for posterity's sake.<\/p>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">&nbsp;1&nbsp;<\/span><span class=\"kn\">package<\/span>&nbsp;<span class=\"nn\">soss.managers<\/span><span class=\"o\">;<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">&nbsp;2&nbsp;<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">&nbsp;3&nbsp;<\/span><span class=\"kn\">import<\/span>&nbsp;<span class=\"nn\">soss.core.*<\/span><span class=\"o\">;<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">&nbsp;4&nbsp;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">&nbsp;5&nbsp;<\/span><span class=\"kd\">public<\/span>&nbsp;<span class=\"kd\">class<\/span>&nbsp;<span class=\"nc\">MS_FirstFit<\/span>&nbsp;<span class=\"kd\">extends<\/span>&nbsp;<span class=\"n\">DefaultMemoryManager<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">&nbsp;6&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"kd\">public<\/span>&nbsp;<span class=\"nf\">MS_FirstFit<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span>&nbsp;<span class=\"n\">RAMSize<\/span><span class=\"o\">)<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">&nbsp;7&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"kd\">super<\/span><span class=\"o\">(<\/span><span class=\"n\">RAMSize<\/span><span class=\"o\">);<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">&nbsp;8&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-9\"><\/a><span class=\"lineno\">&nbsp;9&nbsp;<\/span><br><a name=\"line-10\"><\/a><span class=\"lineno\">10&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"kd\">public<\/span>&nbsp;<span class=\"kt\">int<\/span>&nbsp;<span class=\"nf\">findAvailablePartition<\/span><span class=\"o\">(<\/span><span class=\"kt\">int<\/span>&nbsp;<span class=\"n\">size<\/span><span class=\"o\">)<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-11\"><\/a><span class=\"lineno\">11&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">MemoryPartition<\/span>&nbsp;<span class=\"n\">p<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"kc\">null<\/span><span class=\"o\">;<\/span><br><a name=\"line-12\"><\/a><span class=\"lineno\">12&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;Loop&nbsp;over&nbsp;all&nbsp;available&nbsp;partitions<\/span><br><a name=\"line-13\"><\/a><span class=\"lineno\">13&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">for<\/span>&nbsp;<span class=\"o\">(<\/span><span class=\"kt\">int<\/span>&nbsp;<span class=\"n\">i<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"mi\">0<\/span><span class=\"o\">;<\/span>&nbsp;<span class=\"n\">i<\/span>&nbsp;<span class=\"o\">&lt;<\/span>&nbsp;<span class=\"n\">ram<\/span><span class=\"o\">.<\/span><span class=\"na\">size<\/span><span class=\"o\">();<\/span>&nbsp;<span class=\"n\">i<\/span><span class=\"o\">++)<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-14\"><\/a><span class=\"lineno\">14&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">p<\/span>&nbsp;<span class=\"o\">=<\/span>&nbsp;<span class=\"n\">ram<\/span><span class=\"o\">.<\/span><span class=\"na\">get<\/span><span class=\"o\">(<\/span><span class=\"n\">i<\/span><span class=\"o\">);<\/span><br><a name=\"line-15\"><\/a><span class=\"lineno\">15&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;If&nbsp;it&nbsp;is&nbsp;free&nbsp;and&nbsp;it&nbsp;is&nbsp;large&nbsp;enough&nbsp;we&nbsp;can&nbsp;use&nbsp;it<\/span><br><a name=\"line-16\"><\/a><span class=\"lineno\">16&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if<\/span>&nbsp;<span class=\"o\">(<\/span><span class=\"n\">p<\/span><span class=\"o\">.<\/span><span class=\"na\">isFree<\/span><span class=\"o\">()<\/span>&nbsp;<span class=\"o\">&amp;&amp;<\/span>&nbsp;<span class=\"n\">p<\/span><span class=\"o\">.<\/span><span class=\"na\">getSize<\/span><span class=\"o\">()<\/span>&nbsp;<span class=\"o\">&gt;=<\/span>&nbsp;<span class=\"n\">size<\/span><span class=\"o\">)<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-17\"><\/a><span class=\"lineno\">17&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"n\">i<\/span><span class=\"o\">;<\/span><br><a name=\"line-18\"><\/a><span class=\"lineno\">18&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-19\"><\/a><span class=\"lineno\">19&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-20\"><\/a><span class=\"lineno\">20&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;No&nbsp;partition&nbsp;found,&nbsp;so&nbsp;we&nbsp;return&nbsp;-1<\/span><br><a name=\"line-21\"><\/a><span class=\"lineno\">21&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"o\">-<\/span><span class=\"mi\">1<\/span><br><a name=\"line-22\"><\/a><span class=\"lineno\">22&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-23\"><\/a><span class=\"lineno\">23&nbsp;<\/span><br><a name=\"line-24\"><\/a><span class=\"lineno\">24&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"kd\">public<\/span>&nbsp;<span class=\"n\">String<\/span>&nbsp;<span class=\"nf\">toString<\/span><span class=\"o\">()<\/span>&nbsp;<span class=\"o\">{<\/span><br><a name=\"line-25\"><\/a><span class=\"lineno\">25&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">return<\/span>&nbsp;<span class=\"s\">&quot;FirstFit&quot;<\/span><span class=\"o\">;<\/span><br><a name=\"line-26\"><\/a><span class=\"lineno\">26&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"o\">}<\/span><br><a name=\"line-27\"><\/a><span class=\"lineno\">27&nbsp;<\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br>\n"
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "algorithms",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/algorithms"
          },
          "next": {
            "path": "wiki/algorithms",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "MS_FirstFit",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/algorithms/MS_FirstFit"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "setup",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/setup"
          },
          "description": "",
          "title": "Algorithms",
          "content": "<p>We are finally ready to implement our algorithms! SimOS requires you to provide implementations for the memory management algorithms and the process scheduling algorithms. The classes need to follow a pattern so SimOS can find them and load them.\nYou can find a summary of that below.<\/p>\n<h4 id=\"process-schedulers\">Process schedulers<\/h4>\n<ul>\n<li>First Come, First Served      : <strong>PS_FCFS<\/strong><\/li>\n<li>Shortest Job First            : <strong>PS_SJF<\/strong><\/li>\n<li>Shortest Remaining Time Next  : <strong>PS_SRTN<\/strong><\/li>\n<li>RoundRobin                    : <strong>PS_RR<\/strong><\/li>\n<\/ul>\n<h4 id=\"memory-managers\">Memory managers<\/h4>\n<ul>\n<li>First Fit : <strong>MS_FirstFit<\/strong><\/li>\n<li>NextFit   : <strong>MS_NextFit<\/strong><\/li>\n<li>BestFit   : <strong>MS_BestFit<\/strong><\/li>\n<li>WorstFit  : <strong>MS_WorstFit<\/strong><\/li>\n<\/ul>\n<p>In the following sections we will implement First Come, First Served and First Fit. The rest will be up to you, according to your project description!<\/p>\n<h2 id=\"adding-more-java-files\">Adding more Java files<\/h2>\n<p>We need to add extra files to house our code. You can click the little downwards arrow next to your sketch and select New Tab, then give it the name of the class you want. So for PS_FCFS the file would be named <code>PS_FCFS.java<\/code>.<\/p>\n<p><img class=\"img-fluid mx-auto d-block\" src=\"/assets/media/new_tab.png\"><\/img><\/p>\n"
        }]
      },
      "installation": {
        "ownKey": "installation",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "installation",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/installation"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "setup",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/setup"
          },
          "description": "",
          "title": "Installation",
          "content": "<p>The first thing we need to do is to get Processing running in our machines.<\/p>\n<h2 id=\"installing-processing\">Installing Processing<\/h2>\n<hr />\n<ul>\n<li>\n<p>Download Processing 3.x from <a href=\"https://www.processing.org/download\" target=\"_blank\">processing.org<\/a>.<\/p>\n<p>Make sure to click on the link that matches your operating system. I have tested this project on Windows as well as the VM you have created for the class. Mac users can follow the instructions on the processing website, but Linux instructions should generally work.<\/p>\n<\/li>\n<li>\n<p>Extract the archive. As of writing the latest version is Processing 3.5.3<\/p>\n<p>You can extract the archive to anywhere you have access. I'm using my Desktop. So the processing directory would be:<\/p>\n<ul>\n<li>Windows: <code>C:\\Users\\&lt;username&gt;\\Desktop\\processing-3.5.3<\/code><\/li>\n<li>Linux:   <code>~/Desktop/processing-3.5.3<\/code><\/li>\n<\/ul>\n<\/li>\n<li>\n<p>Run Processing once to create some required folders.<\/p>\n<p>Run the executable inside the processing folder. For Windows it should be <code>processing.exe<\/code> and for Linux <code>processing<\/code>. Once it is done loading, you should be seeing something like this:<\/p>\n<p><img class=\"img-fluid mx-auto d-block\" src=\"/assets/media/empty_processing.jpg\" alt=\"Image of a new processing window\" text=\"New processing window\"><\/img><\/p>\n<\/li>\n<\/ul>\n<h2 id=\"installing-simos\">Installing SimOS<\/h2>\n<hr />\n<p>Our next step is to download the SimOS library and make available to processing. The following steps should help with that but if you get stuck or want extra information, you can always check the documentation <a href=\"https://github.com/processing/processing/wiki/How-to-Install-a-Contributed-Library#manual-install\" target=\"_blank\">here<\/a>.<\/p>\n<ul>\n<li>\n<p>Download the zip found <a href=\"/assets/downloads/soss.zip\" download>here<\/a>.<\/p>\n<\/li>\n<li>\n<p>Extract it to processing's library folder.\nThe location of this folder will vary depending on your OS.<\/p>\n<ul>\n<li>Windows: <code>C:\\Users\\&lt;username&gt;\\Documents\\Pricessing\\libraries<\/code><\/li>\n<li>Debian VM: <code>~/sketchbooks/libraries<\/code><\/li>\n<\/ul>\n<p>The end result should look like:<\/p>\n<pre><code>libraries/\n|\n|___ soss/\n    |\n    |___ examples/\n    |\n    |___ library/\n    |\n    |___ reference/\n    |\n    |___ library.properties\n\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<p>That should be it. To verify that you have installed it correctly, you can start processing and go to <code>Sketch &gt; Import Library<\/code> and you should see SimOS at the end of the list, like this:<\/p>\n<p><img class=\"img-fluid mx-auto d-block\" src=\"/assets/media/library_installed.png\" alt=\"Image of installed library\" text=\"Installed Library\"><\/img><\/p>\n"
        }]
      },
      "setup": {
        "ownKey": "setup",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "setup",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/setup"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "algorithms",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/algorithms"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://zinadore.github.io/sim-os-web",
            "fileName": "installation",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://zinadore.github.io/sim-os-web/wiki/installation"
          },
          "description": "",
          "title": "Basic Setup",
          "content": "<p>With everything installed we can get started with our simulation. In the next few sections, we will create a sketch, setup the simulation then implement some basic algorithms.<\/p>\n<h2 id=\"creating-the-sketch\">Creating the sketch<\/h2>\n<p>Sketches are processing's project format. They are written in Java and you can use the integrated IDE to develop your code.<\/p>\n<p>So, startup processing and go to <code>File &gt; Save As<\/code> to save the sketch wherever you want. I am saving mine at <code>...\\Documents\\Sketches\\HW2<\/code> for example. Next up we will create three functions that processing will call for us. You can always consult the <a href=\"https://processing.org/reference/\" target=\"_blank\">Processing API<\/a> if you need to. But first we need to import the library we installed earlier.<\/p>\n<h2 id=\"importing-the-library\">Importing the library<\/h2>\n<p>Go to <code>Sketch &gt; Import Library &gt; Select SimOS<\/code>. The sketch will update to look like this:<\/p>\n<p><img class=\"img-fluid mx-auto d-block\" src=\"/assets/media/library_imported.png\"><\/img><\/p>\n<p>These import lines, will allow you to use the classes that are part of the library.<\/p>\n<h2 id=\"sketch-methods\">Sketch Methods<\/h2>\n<p>The next three methods are sort of &quot;magic&quot;, in the sense that processing will call them on its own throughout its runtime.<\/p>\n<h3 id=\"settings\">settings()<\/h3>\n<p>This method can be used to set some parameters before our window shows up. Here we are just settings the resolution\nof the window.\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1 <\/span><span class=\"kt\">void<\/span> <span class=\"nf\">settings<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2 <\/span>    <span class=\"c1\">// Width, Height<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3 <\/span>    <span class=\"n\">size<\/span><span class=\"o\">(<\/span><span class=\"mi\">800<\/span><span class=\"o\">,<\/span> <span class=\"mi\">900<\/span><span class=\"o\">);<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4 <\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br><\/p>\n<h3 id=\"setup\">setup()<\/h3>\n<p>This method will get called after our window has been created. This is where we create our Simulation and define its options.\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1 <\/span><span class=\"n\">Simulator<\/span> <span class=\"n\">sim<\/span><span class=\"o\">;<\/span> <span class=\"c1\">// &lt;-- Don't forget this line!<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2 <\/span><span class=\"kt\">void<\/span> <span class=\"nf\">setup<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3 <\/span>    <span class=\"n\">SimulatorOptions<\/span> <span class=\"n\">opts<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">SimulatorOptions<\/span><span class=\"o\">();<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4 <\/span>    <span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">Width<\/span> <span class=\"o\">=<\/span> <span class=\"n\">width<\/span><span class=\"o\">;<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">5 <\/span>    <span class=\"n\">opts<\/span><span class=\"o\">.<\/span><span class=\"na\">Height<\/span> <span class=\"o\">=<\/span> <span class=\"n\">height<\/span><span class=\"o\">;<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">6 <\/span><br><a name=\"line-7\"><\/a><span class=\"lineno\">7 <\/span>    <span class=\"n\">sim<\/span> <span class=\"o\">=<\/span> <span class=\"k\">new<\/span> <span class=\"n\">Simulator<\/span><span class=\"o\">(<\/span><span class=\"k\">this<\/span><span class=\"o\">,<\/span> <span class=\"n\">opts<\/span><span class=\"o\">);<\/span><br><a name=\"line-8\"><\/a><span class=\"lineno\">8 <\/span><span class=\"o\">}<\/span><br><\/pre><\/div><br><\/p>\n<p>For now the only options we set are the Width and Height<\/p>\n<h3 id=\"draw\">draw()<\/h3>\n<p>This method gets called whenever a new frame needs to be drawn. Processing will try it's best to run at 60 or 30 frames per second depending on your hardware.\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1 <\/span><span class=\"kt\">void<\/span> <span class=\"nf\">draw<\/span><span class=\"o\">()<\/span> <span class=\"o\">{<\/span> <span class=\"o\">}<\/span><br><\/pre><\/div><br><\/p>\n<p>You might be surprised to see the method completely emtpy. But you need it to be there, even if it is empty. If you forget this method the simulation will only draw itself once then stop!<\/p>\n<h2 id=\"sanity-check\">Sanity Check<\/h2>\n<p>You can now hit the &quot;Play&quot; button in the top right and see the following screen:<\/p>\n<p><img class=\"img-fluid mx-auto d-block\" src=\"/assets/media/simulation_setup.png\"><\/img><\/p>\n<p>Make sure you can click the various buttons and that they get activated. Do not click Start Simulation though! We need to implement some of these algorithms for the simulation to work!<\/p>\n<p>If the Simulation freezes for any reason, you can just hit the &quot;Stop&quot; button from inside the Processing IDE. You will also see\nsome error messages in the console!<\/p>\n"
        }]
      }
    },
    "ownPages": [
      {
        "reference": {
          "path": "",
          "baseUrl": "https://zinadore.github.io/sim-os-web",
          "fileName": "wiki",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://zinadore.github.io/sim-os-web/wiki"
        },
        "description": "",
        "title": "Wiki",
        "content": "<p>This is the wiki index!@<\/p>\n"
      },
      {
        "reference": {
          "path": "",
          "baseUrl": "https://zinadore.github.io/sim-os-web",
          "fileName": "wiki",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "https://zinadore.github.io/sim-os-web/wiki"
        },
        "description": "",
        "title": "Wiki",
        "content": "<html>\n <head><\/head>\n <body>\n  <p>This wiki will guide you through setting up Processing 3.x first. Then the SimOS library. Finally it will walk you through creating your first Process Scheduler and memory manager.<\/p> \n  <ul> \n   <li><a href=\"https://zinadore.github.io/sim-os-web/wiki/installation\">Installation<\/a><\/li> \n   <li><a href=\"https://zinadore.github.io/sim-os-web/wiki/setup\">Basic Setup<\/a><\/li> \n   <li><a href=\"https://zinadore.github.io/sim-os-web/wiki/algorithms\">Algorithms<\/a> \n    <ul> \n     <li><a href=\"https://zinadore.github.io/sim-os-web/wiki/algorithms/MS_FirstFit\">First Fit<\/a><\/li> \n     <li><a href=\"https://zinadore.github.io/sim-os-web/wiki/algorithms/PS_FCFS\">First Come, First Served<\/a><\/li> \n    <\/ul> <\/li> \n   <li><a href=\"https://zinadore.github.io/sim-os-web/wiki/running\">Running the simulation<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
      }
    ]
  }},
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "https://zinadore.github.io/sim-os-web",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://zinadore.github.io/sim-os-web"
      },
      "description": "",
      "title": "SimOS",
      "content": "<p>SimOS is a simulation framework written in Processing 3. It allows students to experiment with memory management and process scheduling algorithms in a graphical, and extensible environment.<\/p>\n"
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "https://zinadore.github.io/sim-os-web",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "https://zinadore.github.io/sim-os-web/404.html"
      },
      "description": "",
      "title": "SimOS",
      "content": ""
    }
  ]
}